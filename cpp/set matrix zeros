/*
Given a matrix, A of size M x N of 0s and 1s. If an element is 0, set its entire row and column to 0.

Note: This will be evaluated on the extra memory used. Try to minimize the space and time complexity.



Input Format:

The first and the only argument of input contains a 2-d integer matrix, A, of size M x N.
Output Format:

Return a 2-d matrix that satisfies the given conditions.
Constraints:

1 <= N, M <= 1000
0 <= A[i][j] <= 1
Examples:

Input 1:
    [   [1, 0, 1],
        [1, 1, 1], 
        [1, 1, 1]   ]

Output 1:
    [   [0, 0, 0],
        [1, 0, 1],
        [1, 0, 1]   ]

Input 2:
    [   [1, 0, 1],
        [1, 1, 1],
        [1, 0, 1]   ]

Output 2:
    [   [0, 0, 0],
        [1, 0, 1],
        [0, 0, 0]   ] 
 */
 
 
 
 
 
 
 void Solution::setZeroes(vector<vector<int> > &A) {
    int nR = A.size();
    int nC = A[0].size();
    vector<int> r;
    vector<int> c;
    
    for(int i=0; i<nR; ++i)
    {
        for (int j=0; j<nC; ++j)
        {
            if (A[i][j] == 0)
            {
                if (find(r.begin(), r.end(), i) == r.end())
                    r.emplace_back(i);
                if (find(c.begin(), c.end(), j) == c.end())
                    c.emplace_back(j);
            }
        }
    }
    for (const auto& k : r)
    {
        for (int x=0; x<nC; ++x)
        {
            A[k][x] = 0;
        }
    }
    for (const auto& l : c)
    {
        for(int y=0; y<nR; ++y)
        {
            A[y][l] = 0;
        }
    }
}
