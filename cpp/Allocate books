/*

N number of books are given. 
The ith book has Pi number of pages. 
You have to allocate books to M number of students so that maximum number of pages alloted to a student is minimum. A book will be allocated to exactly one student. Each student has to be allocated at least one book. Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.

NOTE: Return -1 if a valid assignment is not possible

Input:
 List of Books M number of students 

Your function should return an integer corresponding to the minimum number.

Example:

P : [12, 34, 67, 90]
M : 2

Output : 113

There are 2 number of students. Books can be distributed in following fashion : 
  1) [12] and [34, 67, 90]
      Max number of pages is allocated to student 2 with 34 + 67 + 90 = 191 pages
  2) [12, 34] and [67, 90]
      Max number of pages is allocated to student 2 with 67 + 90 = 157 pages 
  3) [12, 34, 67] and [90]
      Max number of pages is allocated to student 1 with 12 + 34 + 67 = 113 pages

Of the 3 cases, Option 3 has the minimum pages = 113. 
*/



  
  
bool possible(vector<int> &A,int B,int m)
{
    int i,sum=0,student=1;
    for(i=0;i<A.size();i++)
    {
        if(A[i]>m)
            return false;
        if(A[i]+sum>m)
        {
            student++;
            sum=A[i];
            if(student>B)
                return false;
        }
        else
            sum+=A[i];
    }
    return true;
}
int min(int a,int b)
{
    return a>b?b:a;
}
int Solution::books(vector<int> &A, int B) {
    int i,ans=INT_MAX;
    long long int s=0,e,m,sum=0;
    if(A.size()<B)
        return -1;
    for(i=0;i<A.size();i++)
        sum+=A[i];
    e=sum;
    while(e>=s)
    {
        m=(s+e)/2;
        if(possible(A,B,m))
        {
            ans=min(ans,(int)m);
            e=m-1;
        }
        else
            s=m+1;
    }
    return ans;
}
